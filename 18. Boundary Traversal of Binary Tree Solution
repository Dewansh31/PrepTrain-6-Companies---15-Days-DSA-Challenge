/********************

    Following is the Binary Tree node structure:

    template <typename T>
    class TreeNode
    {
    public:
        T data;
        TreeNode<T> *left;
        TreeNode<T> *right;

        TreeNode(T data)
        {
            this -> data = data;
            left = NULL;
            right = NULL;
        }

        ~TreeNode()
        {
            if(left)
                delete left;
            if(right)
                delete right;
        }
    };

********************/

void traversLeft(TreeNode<int> *root, vector<int> &ans)

{

  if (root == NULL || (root->left == NULL && root->right == NULL))

  {

    return;
  }

  ans.push_back(root->data);

  if (root->left)

  {

    traversLeft(root->left, ans);

  }

  else

  {

    traversLeft(root->right, ans);
  }
}

void traversLeaf(TreeNode<int> *root, vector<int> &ans)

{

  if (root == NULL)

  {

    return;
  }

  if (root->left == NULL && root->right == NULL)

  {

    ans.push_back(root->data);
  }

  traversLeaf(root->left, ans);

  traversLeaf(root->right, ans);
}

void traversRight(TreeNode<int> *root, vector<int> &ans)

{

  if (root == NULL || (root->left == NULL && root->right == NULL))

  {

    return;
  }

  if (root->right)

  {

    traversRight(root->right, ans);

  }

  else

  {

    traversRight(root->left, ans);
  }

  // come back

  ans.push_back(root->data);
}

vector<int> traverseBoundary(TreeNode<int> *root)

{

  // Write your code here.

  vector<int> ans;

  if (root == NULL)

  {

    return ans;
  }

  ans.push_back(root->data);

  // left part store

  traversLeft(root->left, ans);

  // travers Leaf Node

  // for left

  traversLeaf(root->left, ans);

  // for right

  traversLeaf(root->right, ans);

  // right part store

  traversRight(root->right, ans);

  return ans;
}
