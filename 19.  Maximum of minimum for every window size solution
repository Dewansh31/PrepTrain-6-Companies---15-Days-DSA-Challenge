def maxMinWindow(arr, n):

    result = [-99999999999999] * n

    left_min = [0] * n

    right_min = [0] * n

    stack = []

    # Find nearest minimum element on the left for each element

    for i in range(n):

        while stack and arr[i] <= arr[stack[-1]]:

            stack.pop()

        left_min[i] = stack[-1] if stack else -1

        stack.append(i)

    stack = []

    # Find nearest minimum element on the right for each element

    for i in range(n - 1, -1, -1):

        while stack and arr[i] <= arr[stack[-1]]:

            stack.pop()

        right_min[i] = stack[-1] if stack else n

        stack.append(i)

    # Calculate the maximum of minimum values for each window size

    for i in range(n):

        window_size = right_min[i] - left_min[i] - 1

        result[window_size - 1] = max(result[window_size - 1], arr[i])

    # Fill in any missing values in the result list

    for i in range(n - 2, -1, -1):

        result[i] = max(result[i], result[i + 1])

    return result
