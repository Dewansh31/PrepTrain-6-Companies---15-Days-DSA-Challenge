Node<int>* reverse(Node<int>*head){

    Node<int>*curr=head;

    Node<int>*prev=NULL;

    Node<int>*forward=NULL;

 

    while(curr!=NULL)

    {

        forward=curr->next;

        curr->next=prev;

        prev=curr;

        curr=forward;

    }

    return prev;

}

 

void insertAtTail(Node<int>* &head, Node<int>* &tail, int val){

    Node<int>* temp=new Node<int>(val);

    if(head==NULL){

        head=temp;

        tail=temp;

        return;

    }

    else{

        tail->next=temp;

        tail=temp;

    }

}

 

Node<int>* add(Node<int>* first, Node<int>* second){

 

    Node<int>*ansHead=NULL;

    Node<int>*ansTail=NULL;

 

    int carry=0;

 

    while(first!=NULL && second!=NULL){

        int sum = carry+first->data+second->data;

        int digit=sum%10;

        insertAtTail(ansHead,ansTail,digit);

        carry=sum/10;

        first=first->next;

        second=second->next;

    }

    while(first!=NULL){

        int sum = carry+first->data;

        int digit=sum%10;

        insertAtTail(ansHead,ansTail,digit);

        carry=sum/10;

        first=first->next;

    }

    while(second!=NULL){

        int sum = carry+second->data;

        int digit=sum%10;

        insertAtTail(ansHead,ansTail,digit);

        carry=sum/10;

        second=second->next;

    }

    while(carry!=0){

        int sum = carry;

        int digit=sum%10;

        insertAtTail(ansHead,ansTail,digit);

        carry=sum/10;

    }

    return ansHead;

 

}

 

Node<int>* addTwoLists(Node<int>* first, Node<int>* second) {

   

   first= reverse(first);

 

   second=reverse(second);

 

   Node<int>* ans=add(first,second);

 

   ans = reverse (ans);

 

   return ans; 

    

}
